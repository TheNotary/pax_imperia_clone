import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import lobbiesApi from './lobbiesAPI';


export const fetchAll = createAsyncThunk(
    'lobbies/fetchAll',   // This is our action name
    async(thunkAPI) => {  // This is how we magically get fetchAll.pending/ fulfilled/ rejected to work
        const response = await lobbiesApi.fetchAllLobbies();
        return response;  // this is the state returned, making action.meta.requestId available to the reducers below...
    }
);

export const lobbiesSlice = createSlice({
    name: 'lobbies',
    initialState: {
        loading: 'idle',
        currentRequestId: undefined,
        lobbies: []
    },
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {},
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk (above) or in other slices.
    extraReducers: {
        [fetchAll.pending]: (state, action) => {
            if (state.loading === 'idle') {
                state.loading = 'pending';
                state.currentRequestId = action.meta.requestId;
            }
        },
        [fetchAll.fulfilled]: (state, action) => {
            state.lobbies = action.payload;
            state.loading = 'idle';
        },
        [fetchAll.rejected]: (state, action) => {
            const { requestId } = action.meta;
            if (state.loading === 'pending' && state.currentRequestId === requestId) {
                if (action.error.message === 'Unauthorized') {
                    state.loading = 'Unauthorized';
                    state.error = action.error;
                    state.currentRequestId = undefined;
                }
                else if (action.error.message === 'Token Expired') {
                    state.loading = 'idle';
                    state.error = action.error;
                    state.currentRequestId = undefined;
                }
                else {
                    state.loading = 'idle';
                    state.error = action.error;
                    state.currentRequestId = undefined;
                }
            }
        }
    }
});


export default lobbiesSlice.reducer;
